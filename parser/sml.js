/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,4],$V2=[1,25],$V3=[1,5],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,21],$Va=[1,11],$Vb=[1,12],$Vc=[1,13],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,23],$Vi=[1,24],$Vj=[1,27],$Vk=[1,28],$Vl=[1,31],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,38],$Vq=[1,37],$Vr=[5,7,8,13,14,15,16,17,18,21,23,28,31,32,35,36,37,39,42,53,54,55,57,64,65,66,67,68],$Vs=[1,46],$Vt=[22,41,42,43,44,45,46,47,48,49,50,51,52],$Vu=[2,45],$Vv=[2,52],$Vw=[1,57],$Vx=[1,55],$Vy=[1,56],$Vz=[8,10,22,24,34,41,42,43,44,45,46,47,48,49,50,51,52,57,58,60,61],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,71],$VG=[1,72],$VH=[1,73],$VI=[1,74],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[10,22,41,42,43,44,45,46,47,48,49,50,51,52,58,61],$VN=[10,22,31,41,42,43,44,45,46,47,48,49,50,51,52,58,61],$VO=[10,22,41,42,46,47,48,49,50,51,52,58,61],$VP=[2,79],$VQ=[10,58],$VR=[1,129],$VS=[1,132],$VT=[1,140],$VU=[10,22,41,42,43,44,46,47,48,49,50,51,52,58,61],$VV=[10,22,47,48,49,50,51,52,58,61],$VW=[31,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"IF":7,"(":8,"expression":9,")":10,"block":11,"ELSE":12,"REPEAT":13,"UNTIL":14,"WHILE":15,"FOREVER":16,"NO_REFRESH":17,"IMPORT":18,"string_literal":19,"AS":20,"IDENTIFIER":21,";":22,"CONST":23,"=":24,"literal_block":25,"accessor":26,"array_initializer":27,"ENUM":28,"{":29,"property_list":30,"}":31,"LET":32,"array_index":33,"+=":34,"STOP":35,"VOID":36,"FUNCTION":37,"identifier_list":38,"RETURN":39,"e":40,"+":41,"-":42,"*":43,"/":44,"%":45,"#":46,"==":47,"!=":48,">":49,"<":50,"&&":51,"||":52,"!":53,"@":54,"@f":55,"function_call":56,"[":57,"]":58,"expression_list":59,".":60,",":61,"property":62,"number_literal":63,"TRUE":64,"FALSE":65,"NULL":66,"NUMBER":67,"STRING":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IF",8:"(",10:")",12:"ELSE",13:"REPEAT",14:"UNTIL",15:"WHILE",16:"FOREVER",17:"NO_REFRESH",18:"IMPORT",20:"AS",21:"IDENTIFIER",22:";",23:"CONST",24:"=",28:"ENUM",29:"{",31:"}",32:"LET",34:"+=",35:"STOP",36:"VOID",37:"FUNCTION",39:"RETURN",41:"+",42:"-",43:"*",44:"/",45:"%",46:"#",47:"==",48:"!=",49:">",50:"<",51:"&&",52:"||",53:"!",54:"@",55:"@f",57:"[",58:"]",60:".",61:",",64:"TRUE",65:"FALSE",66:"NULL",67:"NUMBER",68:"STRING"},
productions_: [0,[3,2],[4,1],[4,2],[4,0],[6,5],[6,7],[6,5],[6,5],[6,5],[6,2],[6,2],[6,5],[6,3],[6,5],[6,5],[6,5],[6,5],[6,3],[6,5],[6,4],[6,4],[6,4],[6,2],[6,2],[6,6],[6,2],[6,3],[6,2],[11,3],[9,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,1],[40,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[33,4],[56,3],[56,4],[26,1],[26,3],[59,1],[59,2],[59,3],[38,1],[38,2],[38,3],[38,0],[27,3],[27,2],[30,1],[30,2],[30,3],[30,0],[62,1],[62,3],[25,1],[25,1],[25,1],[25,1],[25,1],[63,1],[63,2],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            return $$[$0-1];
        
break;
case 2:

            this.$ = (ctx) => $$[$0](ctx);
        
break;
case 3:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.statements(yy, ctx.at(yyat), $$[$0-1](ctx), $$[$0](ctx));
            }
        
break;
case 4: case 24:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.void_statement(yy, ctx.at(yyat));
            }
        
break;
case 5:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.if_statement(yy, ctx.at(yyat), $$[$0-2](ctx), $$[$0](ctx));
            }
        
break;
case 6:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.if_else_statement(yy, ctx.at(yyat), $$[$0-4](ctx), $$[$0-2](ctx), $$[$0](ctx));
            }
        
break;
case 7:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.repeat_statement(yy, ctx.at(yyat), $$[$0-2](ctx), $$[$0](ctx));
            }
        
break;
case 8:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.until_statement(yy, ctx.at(yyat), $$[$0-2](ctx), $$[$0](ctx));
            }
        
break;
case 9:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.while_statement(yy, ctx.at(yyat), $$[$0-2](ctx), $$[$0](ctx));
            }
        
break;
case 10:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.forever_statement(yy, ctx.at(yyat), $$[$0](ctx));
            }
        
break;
case 11:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.no_refresh_block(yy, ctx, ctx.at(yyat), $$[$0]);
            }
        
break;
case 12:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.import_statement(yy, ctx.at(yyat), ctx.scope, $$[$0-3], $$[$0-1]);
            }
        
break;
case 13:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.import_statement(yy, ctx.at(yyat), ctx.scope, $$[$0-1]);
            }
        
break;
case 14:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.const_statement(yy, ctx.at(yyat), ctx.scope, $$[$0-3], $$[$0-1](ctx));
            }
        
break;
case 15:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.const_statement_copy(yy, ctx.at(yyat), ctx.scope, $$[$0-3], $$[$0-1](ctx));
            }
        
break;
case 16:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.array_initializer(yy, ctx.at(yyat), ctx.scope, $$[$0-3], $$[$0-1](ctx));
            }
        
break;
case 17:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.enum_statement(yy, ctx.at(yyat), ctx, $$[$0-3], $$[$0-1](ctx));
            }
        
break;
case 18:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.declare_statement(yy, ctx.at(yyat), ctx.scope, $$[$0-1], null);
            }
        
break;
case 19:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.declare_statement(yy, ctx.at(yyat), ctx.scope, $$[$0-3], $$[$0-1](ctx));
            }
        
break;
case 20:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.list_replace_statement(yy, ctx.at(yyat), $$[$0-3].accessor(ctx), $$[$0-3].expression(ctx), $$[$0-1](ctx));   
            }
        
break;
case 21:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.assign_statement(yy, ctx.at(yyat), ctx.scope, 'data_setvariableto', $$[$0-3](ctx), $$[$0-1](ctx));
            }
        
break;
case 22:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.assign_statement(yy, ctx.at(yyat), ctx.scope, 'data_changevariableby', $$[$0-3](ctx), $$[$0-1](ctx));
            }
        
break;
case 23:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.stop_statement(yy, ctx.at(yyat));
            }
        
break;
case 25:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.function_declaration_statement(yy, ctx.at(yyat), ctx, $$[$0-4], $$[$0-2], $$[$0]);
            }
        
break;
case 26:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.return_value(yy, ctx.at(yyat), ctx, null);
            }
        
break;
case 27:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.return_value(yy, ctx.at(yyat), ctx, $$[$0-1](ctx));
            }
        
break;
case 28:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression_statement(yy, ctx.at(yyat), $$[$0-1](ctx));
            }
        
break;
case 29: case 46:

            this.$ = (ctx) => $$[$0-1](ctx);
        
break;
case 31:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.add,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 32:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.sub,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 33:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.mul,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 34:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.div,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 35:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.mod,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 36:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.strjoin,
                    [$$[$0-2](ctx), $$[$0](ctx)],
                );
            }
        
break;
case 37:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.sub,
                    [
                        yy.generators.expression(yy, ctx.at(yyat), yy.program.number(0)),
                        $$[$0](ctx),
                    ],
                );
            }
        
break;
case 38:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.eq,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 39:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.neq,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 40:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.gt,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 41:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.lt,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 42:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.and,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 43:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.or,
                    [$$[$0-2](ctx), $$[$0](ctx)]
                );
            }
        
break;
case 44:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.use_macro(
                    yy,
                    ctx.at(yyat),
                    yy.compiler.operators.not,
                    [$$[$0](ctx)]
                );
            }
        
break;
case 45:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.index_expression(yy, ctx.at(yyat), $$[$0].accessor(ctx), $$[$0].expression(ctx));
            }
        
break;
case 47:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.array_expression(yy, ctx.at(yyat), $$[$0](ctx));
            }
        
break;
case 48:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string(
                    `line ${ctx.at(yyat).first_line} of ${ctx.file()}`
                ));
            }
        
break;
case 49:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string(ctx.file()));
            }
        
break;
case 53:

            {
                this.$ = {accessor: $$[$0-3], expression: $$[$0-1]};
            }
        
break;
case 54:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.function_call_expression(yy, ctx.at(yyat), $$[$0-2](ctx), []);
            }
        
break;
case 55:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.function_call_expression(yy, ctx.at(yyat), $$[$0-3](ctx), $$[$0-1](ctx));
            }
        
break;
case 56:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.accessor_init(yy, ctx.at(yyat), ctx.scope, $$[$0]);
            }
        
break;
case 57:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.accessor_dot(yy, ctx.at(yyat), $$[$0-2](ctx), $$[$0]);
            }
        
break;
case 58: case 67:

            this.$ = (ctx) => [$$[$0](ctx)];
        
break;
case 59: case 68:

            this.$ = (ctx) => [$$[$0-1](ctx)];
        
break;
case 60: case 69:

            this.$ = (ctx) => [$$[$0-2](ctx), ...$$[$0](ctx)];
        
break;
case 61:

            this.$ = [$$[$0]];
        
break;
case 62:

            this.$ = [$$[$0-1]];
        
break;
case 63:

            this.$ = [$$[$0-2], ...$$[$0]];
        
break;
case 64:

            this.$ = [];
        
break;
case 65:

            {
                const yyat = this._$;
                this.$ = (ctx) => $$[$0-1](ctx);
            }
        
break;
case 66:

            {
                const yyat = this._$;
                this.$ = (ctx) => [];
            }
        
break;
case 70:

            this.$ = (ctx) => [];
        
break;
case 71:

            {
                this.$ = (ctx) => ({identifier: $$[$0]});
            }
        
break;
case 72:

            {
                this.$ = (ctx) => ({identifier: $$[$0-2], value: $$[$0](ctx)});
            }
        
break;
case 73:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string($$[$0]));
            }
        
break;
case 74:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.number($$[$0]));
            }
        
break;
case 75:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string('true'))
            }
        
break;
case 76:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string('false'))
            }
        
break;
case 77:

            {
                const yyat = this._$;
                this.$ = (ctx) => yy.generators.expression(yy, ctx.at(yyat), yy.program.string(''))
            }
        
break;
case 78:
this.$=Number(yytext)
break;
case 79:
this.$=-Number(yytext)
break;
case 80:
this.$=yytext.slice(1,-1).replaceAll('\\', '')
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:$V1,8:$V2,9:20,13:$V3,14:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:32,21:$V9,23:$Va,25:29,26:15,27:26,28:$Vb,32:$Vc,33:14,35:$Vd,36:$Ve,37:$Vf,39:$Vg,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{1:[3]},{5:[1,39],6:40,7:$V1,8:$V2,9:20,13:$V3,14:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:32,21:$V9,23:$Va,25:29,26:15,27:26,28:$Vb,32:$Vc,33:14,35:$Vd,36:$Ve,37:$Vf,39:$Vg,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($Vr,[2,2]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{11:45,29:$Vs},{11:47,29:$Vs},{19:48,68:$Vq},{21:[1,49]},{21:[1,50]},{21:[1,51]},o($Vt,$Vu,{24:[1,52]}),o($Vt,$Vv,{8:$Vw,24:[1,53],34:[1,54],57:$Vx,60:$Vy}),{22:[1,58]},{22:[1,59]},{21:[1,60]},{8:$V2,9:62,19:32,21:$V9,22:[1,61],25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{22:[1,65]},o($Vz,[2,56]),o([10,22,58,61],[2,30],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:78,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:[1,79],68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:80,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:81,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),{8:$V2,9:84,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,58:[1,83],59:82,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),o([10,20,22,31,41,42,43,44,45,46,47,48,49,50,51,52,58,61],[2,80]),o($VN,[2,78]),{1:[2,1]},o($Vr,[2,3]),{8:$V2,9:85,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:86,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:87,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:88,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($Vr,[2,10]),{4:89,6:3,7:$V1,8:$V2,9:20,13:$V3,14:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:32,21:$V9,23:$Va,25:29,26:15,27:26,28:$Vb,31:$V0,32:$Vc,33:14,35:$Vd,36:$Ve,37:$Vf,39:$Vg,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($Vr,[2,11]),{20:[1,90],22:[1,91]},{24:[1,92]},{29:[1,93]},{22:[1,94],24:[1,95]},{8:$V2,9:96,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:97,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:98,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,9:99,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{21:[1,100]},{8:$V2,9:84,10:[1,101],19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,59:102,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($Vr,[2,23]),o($Vr,[2,24]),{8:[1,103]},o($Vr,[2,26]),{22:[1,104]},o($VM,$Vu),o($VM,$Vv,{8:$Vw,57:$Vx,60:$Vy}),o($Vr,[2,28]),{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:105,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:106,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:107,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:108,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:109,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:110,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:111,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:112,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:113,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:114,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:115,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{8:$V2,19:32,21:$V9,25:29,26:64,27:26,33:63,40:116,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($VO,[2,37],{43:$VC,44:$VD,45:$VE}),o($VM,$VP),o($VM,[2,44]),{10:[1,117],41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL},{58:[1,118]},o($VM,[2,66]),o($VQ,[2,58],{61:[1,119]}),{10:[1,120]},{10:[1,121]},{10:[1,122]},{10:[1,123]},{6:40,7:$V1,8:$V2,9:20,13:$V3,14:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:32,21:$V9,23:$Va,25:29,26:15,27:26,28:$Vb,31:[1,124],32:$Vc,33:14,35:$Vd,36:$Ve,37:$Vf,39:$Vg,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{21:[1,125]},o($Vr,[2,13]),{19:32,21:$V9,25:126,26:127,27:128,42:$VR,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{21:$VS,30:130,31:[2,70],62:131},o($Vr,[2,18]),{8:$V2,9:133,19:32,21:$V9,25:29,26:64,27:26,33:63,40:22,42:$Vh,53:$Vi,54:$Vj,55:$Vk,56:30,57:$Vl,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},{22:[1,134]},{22:[1,135]},{22:[1,136]},{58:[1,137]},o($Vz,[2,57]),o($VM,[2,54]),{10:[1,138]},{10:[2,64],21:$VT,38:139},o($Vr,[2,27]),o($VO,[2,31],{43:$VC,44:$VD,45:$VE}),o($VO,[2,32],{43:$VC,44:$VD,45:$VE}),o($VU,[2,33],{45:$VE}),o($VU,[2,34],{45:$VE}),o($VM,[2,35]),o([10,22,46,47,48,49,50,51,52,58,61],[2,36],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE}),o($VV,[2,38],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF}),o($VV,[2,39],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF}),o($VV,[2,40],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF}),o($VV,[2,41],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF}),o([10,22,51,52,58,61],[2,42],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o([10,22,52,58,61],[2,43],{41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK}),o($VM,[2,46]),o($VM,[2,65]),o($VQ,[2,59],{40:22,27:26,25:29,56:30,19:32,63:33,33:63,26:64,9:84,59:141,8:$V2,21:$V9,42:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq}),{11:142,29:$Vs},{11:143,29:$Vs},{11:144,29:$Vs},{11:145,29:$Vs},o([5,7,8,12,13,14,15,16,17,18,21,23,28,31,32,35,36,37,39,42,53,54,55,57,64,65,66,67,68],[2,29]),{22:[1,146]},{22:[1,147]},{22:[1,148],60:$Vy},{22:[1,149]},{67:[1,150]},{31:[1,151]},{31:[2,67],61:[1,152]},o($VW,[2,71],{24:[1,153]}),{22:[1,154]},o($Vr,[2,20]),o($Vr,[2,21]),o($Vr,[2,22]),o([10,22,24,41,42,43,44,45,46,47,48,49,50,51,52,58,61],[2,53]),o($VM,[2,55]),{10:[1,155]},{10:[2,61],61:[1,156]},o($VQ,[2,60]),o($Vr,[2,5],{12:[1,157]}),o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,12]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),o([22,31,61],$VP),o($Vr,[2,17]),{21:$VS,30:158,31:[2,68],62:131},{19:32,25:159,42:$VR,63:33,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq},o($Vr,[2,19]),{11:160,29:$Vs},{10:[2,62],21:$VT,38:161},{11:162,29:$Vs},{31:[2,69]},o($VW,[2,72]),o($Vr,[2,25]),{10:[2,63]},o($Vr,[2,6])],
defaultActions: {39:[2,1],158:[2,69],161:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 68;
break;
case 1:/* skip comment */
break;
case 2:/* skip empty comment */
break;
case 3:/* skip whitespace */
break;
case 4:return 67;
break;
case 5:return 60;
break;
case 6:return 61;
break;
case 7:return '=>'
break;
case 8:return 47;
break;
case 9:return 49;
break;
case 10:return 50;
break;
case 11:return 48;
break;
case 12:return '>=';
break;
case 13:return '<=';
break;
case 14:return 51;
break;
case 15:return 52;
break;
case 16:return 53;
break;
case 17:return 24;
break;
case 18:return 34;
break;
case 19:return 43;
break;
case 20:return 44;
break;
case 21:return 42;
break;
case 22:return 41;
break;
case 23:return '^';
break;
case 24:return 8;
break;
case 25:return 10;
break;
case 26:return 29;
break;
case 27:return 31;
break;
case 28:return 57;
break;
case 29:return 58;
break;
case 30:return 22;
break;
case 31:return 45;
break;
case 32:return 46;
break;
case 33:return 55;
break;
case 34:return 54;
break;
case 35:return 7;
break;
case 36:return 12;
break;
case 37:return 13;
break;
case 38:return 14;
break;
case 39:return 15;
break;
case 40:return 16;
break;
case 41:return 18;
break;
case 42:return 20;
break;
case 43:return 23;
break;
case 44:return 32;
break;
case 45:return 28;
break;
case 46:return 35;
break;
case 47:return 36;
break;
case 48:return 37;
break;
case 49:return 17;
break;
case 50:return 39;
break;
case 51:return 64;
break;
case 52:return 65;
break;
case 53:return 66;
break;
case 54:return 21;
break;
case 55:return 5;
break;
}
},
rules: [/^(?:"(\\.|[^"\\])*")/,/^(?:(\/\/)(.+?)(?=[\n\r]|\*\)))/,/^(?:\/\/)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\.)/,/^(?:,)/,/^(?:=>)/,/^(?:==)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:%)/,/^(?:#)/,/^(?:@f\b)/,/^(?:@)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:while\b)/,/^(?:forever\b)/,/^(?:import\b)/,/^(?:as\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:enum\b)/,/^(?:stop\b)/,/^(?:void\b)/,/^(?:function\b)/,/^(?:no_refresh\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*)\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sml;
exports.Parser = sml.Parser;
exports.parse = function () { return sml.parse.apply(sml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}